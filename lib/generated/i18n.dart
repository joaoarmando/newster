import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get add_photo => "Add photo";
  String get are_you_sure_about_delete_your_account => "Are you sure you want to delete your account? All your data will be deleted forever!";
  String get are_you_sure_about_logout => "Are you sure you would like to logout of your account?";
  String get available_contries => "Available countries";
  String get cancel => "Cancel";
  String get change_password => "Change password";
  String get check_the_email => "Check the email";
  String get check_the_name => "Check the name";
  String get choose_your_country_for_news => "Which country are you interested in see news?";
  String get conclude => "Conclude";
  String get confirm_password => "Confirm password";
  String get contact_us => "Contact us";
  String get continue_text => "Continue";
  String get country_news => "Locale of the news";
  String get create_account => "Create Account";
  String get delete => "Delete";
  String get delete_account => "Delete my account";
  String get different_passwords => "Passwords must match";
  String get dont_have_an_account => "Don't have an account?";
  String get edit_picture => "Edit picture";
  String get edit_profile => "Edit profile";
  String get email => "Email";
  String get email_already_sended => "An email has already been sent, check your mail inbox/spam";
  String get email_already_used => "Email already in use";
  String get email_sended => "Email successfully sent!";
  String get feed_type => "Feed type";
  String get forgot_password => "Forgot password?";
  String get having_problems => "Having problems?";
  String get hello_there => "Hello, there!";
  String get highlighted => "Highlighted";
  String get insufficient_characters_feedback => "You must type at least 10 characters";
  String get insufficient_characters_feedback_description => "You must type at least 10 characters in your feedback.";
  String get invalid_email => "Enter a valid email";
  String get invalid_name => "Invalid name!";
  String get lets_create_your_account_now => "Let's create your account now!";
  String get login => "Login";
  String get login_canceled => "Login canceled";
  String get login_fail => "Couldn't login now.";
  String get logout => "Logout";
  String get my_account => "My account";
  String get name => "Name";
  String get no_internet => "Looks like you're not connected, check your internet connection..";
  String get nothing_here => "Nothing here...";
  String get only_you_will_see_your_beautiful_face => "Only you will see your beautiful face on the home screen*";
  String get or => "Or";
  String get password => "Password";
  String get password_change_failed => "We couldn't change your password now.";
  String get password_length => "Your new password must be at least 8 characters";
  String get rate_app => "Rate app";
  String get recover_password => "Recover password";
  String get save_news_and_much_more => "Save news to see later, and much more coming";
  String get saved_news => "Saved news";
  String get saving_your_photo => "Saving your photo...";
  String get search_news => "Search news";
  String get send => "Send";
  String get send_feedback => "Send feedback";
  String get settings => "Settings";
  String get sign_in_with_facebook => "Sign in with Facebook";
  String get sign_in_with_google => "Sign in with Google";
  String get simple => "Simple";
  String get skip => "Skip";
  String get try_again => "Try again";
  String get type_name_and_last_name => "Type your firs and last name";
  String get type_valid_email => "Enter a valid email";
  String get type_your_email_above_to_recover_password => "Type your email above to recover your password.";
  String get type_your_email_if_necessary => "If necessary, please type your email so we can contact you.";
  String get use_email_and_password => "Use my email";
  String get version => "Version: ";
  String get we_couldnt_delete_your_account_now => "We couldn't delete your account now, try again later or contact us on support.";
  String get what_about_add_an_photo_of_yourself => "Would you like to add a photo?";
  String get wrong_email_or_password => "Incorrect email or password";
  String get you_can_send_your_feedback_without_type_an_email => "You can send us your feedback even without entering your email, but we won't be able to answer you";
  String get you_need_help_or_would_like_to_send_your_feedback => "Need help or would you like to send us a feedback?";
  String get you_need_log_in_to_save_news => "You must be logged in to save news to see later.";
  String get you_need_log_in_to_see_your_saved_news => "You must be logged in to see your saved news.";
  String get you_will_receive_an_email_password_request => "You will receive an email if this email is associated with an account, please check your inbox/spam.";
}

class $pt extends S {
  const $pt();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "Cancelar";
  @override
  String get you_need_log_in_to_save_news => "Você precisa fazer login para poder savar notícias para ver mais tarde.";
  @override
  String get save_news_and_much_more => "Salve notícias para ler mais tarde, e muito mais vindo...";
  @override
  String get email_already_used => "Este email já esta em uso.";
  @override
  String get insufficient_characters_feedback => "Digite ao menos 10 caracteres no seu feedback.";
  @override
  String get check_the_name => "Verifique o nome digitado";
  @override
  String get sign_in_with_google => "Entrar com Google";
  @override
  String get simple => "Simples";
  @override
  String get invalid_email => "Email inválido";
  @override
  String get use_email_and_password => "Usar email e senha";
  @override
  String get change_password => "Alterar senha";
  @override
  String get country_news => "Local das notícias";
  @override
  String get available_contries => "Países disponíveis";
  @override
  String get email_already_sended => "Um email já foi enviado anteriormente, verifique a caixa de entrada/spam.";
  @override
  String get password => "Password";
  @override
  String get logout => "Sair da conta";
  @override
  String get saved_news => "Notícias salvas";
  @override
  String get saving_your_photo => "Salvando foto...";
  @override
  String get you_will_receive_an_email_password_request => "Você receberá um email se este endereço de email estiver associado a uma conta, verifique sua caixa de entrada/spam";
  @override
  String get are_you_sure_about_logout => "Tem certeza que gostaria de sair da sua conta?";
  @override
  String get my_account => "Minha conta";
  @override
  String get password_change_failed => "Não conseguimos alterar sua senha agora.";
  @override
  String get settings => "Configurações";
  @override
  String get choose_your_country_for_news => "Escolha o país de preferencia para suas notícias!";
  @override
  String get wrong_email_or_password => "Email ou senha incorretos";
  @override
  String get dont_have_an_account => "Não tem uma conta?";
  @override
  String get conclude => "Conclude";
  @override
  String get nothing_here => "Nada por aqui...";
  @override
  String get different_passwords => "As senhas não coincidem.";
  @override
  String get only_you_will_see_your_beautiful_face => "Só você verá seu lindo rosto na tela inicial*";
  @override
  String get insufficient_characters_feedback_description => "Você precisa digitar ao menos 10 caracteres no seu feedback.";
  @override
  String get version => "Versão: ";
  @override
  String get type_valid_email => "Insira um email válido";
  @override
  String get delete_account => "Deltar minha conta";
  @override
  String get check_the_email => "Verifique o email digitado";
  @override
  String get name => "Nome";
  @override
  String get invalid_name => "Nome inválido!";
  @override
  String get send => "Enviar";
  @override
  String get feed_type => "Modo de exibição das notícias";
  @override
  String get send_feedback => "Enviar feedback";
  @override
  String get having_problems => "Enfrentando problemas?";
  @override
  String get you_need_log_in_to_see_your_saved_news => "Você precisa fazer login para poder ver suas notícias salvas.";
  @override
  String get are_you_sure_about_delete_your_account => "Tem certeza que deseja deletar sua conta? Todos os seus dados serão apagados para sempre!";
  @override
  String get skip => "Pular";
  @override
  String get contact_us => "Entrar em contato";
  @override
  String get login => "Fazer login";
  @override
  String get recover_password => "Recuperar senha";
  @override
  String get delete => "Deletar";
  @override
  String get type_your_email_above_to_recover_password => "Digite seu email acima para recuperar sua senha";
  @override
  String get sign_in_with_facebook => "Entrar com Facebook";
  @override
  String get confirm_password => "Confirm password";
  @override
  String get password_length => "Sua senha deve ter ao menos 8 caracteres.";
  @override
  String get continue_text => "Continuar";
  @override
  String get search_news => "Pesquisar notícia";
  @override
  String get email => "Email";
  @override
  String get add_photo => "Adicionar foto";
  @override
  String get type_name_and_last_name => "Digite seu nome e sobrenome";
  @override
  String get edit_profile => "Editar perfil";
  @override
  String get email_sended => "Email enviado com sucesso!";
  @override
  String get try_again => "Tentar novamente";
  @override
  String get or => "Ou";
  @override
  String get edit_picture => "Editar foto";
  @override
  String get highlighted => "Em destaque";
  @override
  String get type_your_email_if_necessary => "Se necessário, insira um email abaixo para que possamos entrar em contato.";
  @override
  String get login_canceled => "Login cancelado";
  @override
  String get create_account => "Criar conta";
  @override
  String get we_couldnt_delete_your_account_now => "Não foi possível deletar sua conta agora. Se o problema persitir entre em contato com suporte.";
  @override
  String get lets_create_your_account_now => "Vamos criar sua conta agora!";
  @override
  String get rate_app => "Avaliar app";
  @override
  String get hello_there => "Olá,usuário!";
  @override
  String get login_fail => "Não foi possível efetuar login agora.";
  @override
  String get you_need_help_or_would_like_to_send_your_feedback => "Esta precisando de ajuda ou gostaria de enviar seu feedback?";
  @override
  String get what_about_add_an_photo_of_yourself => "Que tal adicionar uma foto sua?";
  @override
  String get you_can_send_your_feedback_without_type_an_email => "Você pode enviar seu feedback mesmo sem inserir um email válido, mas não poderemos responde-lo";
  @override
  String get no_internet => "Parece que você esta sem conexão com a internet, verifique sua conexão.";
  @override
  String get forgot_password => "Esqueceu sua senha?";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("pt", ""),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "pt":
          S.current = const $pt();
          return SynchronousFuture<S>(S.current);
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
